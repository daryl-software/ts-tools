import { exec } from 'child_process';
import { writeFileSync, realpathSync } from 'node:fs';
import { argv, cwd } from 'node:process';
import type { IconPrefix } from '@fortawesome/fontawesome-common-types';

function argValue(argName: string, defaultValue?: string) {
    const found = argv.find((a) => a.startsWith(`--${argName}`))?.split('=')[1];

    if (!found && defaultValue === undefined) {
        throw new Error(`Missing --${argName} argument`);
    }
    return found ?? defaultValue;
}

const src = argValue('src'),
    out = argValue('out'),
    extensions = argValue('ext', 'vue,ts')?.split(',') ?? [],
    diretoryToScan = realpathSync(`${cwd()}/${src}`),
    output = realpathSync(`${cwd()}/${out}`),
    libMap: Partial<Record<IconPrefix, string>> = {
        fab: 'free-brands-svg-icons',
        fad: 'pro-duotone-svg-icons',
        fadl: 'duotone-light-svg-icons',
        fadr: 'duotone-regular-svg-icons',
        fadt: 'duotone-thin-svg-icons',
        fal: 'pro-light-svg-icons',
        far: 'pro-regular-svg-icons',
        fas: 'pro-solid-svg-icons',
        fasdl: 'sharp-duotone-light-svg-icons',
        fasdr: 'sharp-duotone-regular-svg-icons',
        fasds: 'sharp-duotone-solid-svg-icons',
        fasdt: 'sharp-duotone-thin-svg-icons',
        fasl: 'sharp-light-svg-icons',
        fasr: 'sharp-regular-svg-icons',
        fass: 'sharp-solid-svg-icons',
        fast: 'sharp-thin-svg-icons',
        fat: 'pro-thin-svg-icons',
        // facr: '',
        // faes: '',
        // fajdr: '',
        // fajfr: '',
        // fajr: '',
        // fak: '', // kits ?
        // fakd: '', // kits ?
        // fands: '',
        // fans: '',
        // faslpr: '',
        // faslr: '',
        // fatl: '',
        // fawsb: '',
    },
    keys = `(${Object.keys(libMap).join('|')})`,
    // match the icon lib and the rest like ['fas', 'trash'] or ["fad", bool ? "trash" : 'trash-alt']
    // doesnt work yet on complex cases (containing brackets) like ["fas", var['access'] ? "trash" : 'trash-alt']
    r1 = new RegExp(`\\[(["'])${keys}\\1, ([^\\]]+)]`, 'gd'),
    // extract all strings from the second match 'trash', 'trash-alt'
    r2 = /(["'])([a-z0-9-]{3,})\1/g,
    cmd = `grep -Er ${extensions.map((ext) => `--include \\*.${ext}`).join(' ')} "(['\\"])${keys}\\1" ${diretoryToScan}`;

// find content matching (fas|far|fab|fal|fad|fass) in diretoryToScan
console.log(`üîé Looking for icons in ${diretoryToScan} with extensions ${extensions.join(',')}`);
// console.log(cmd);
exec(cmd, (_, stdout) => {
    const libs = stdout.split('\n').reduce<Record<string, string[]>>((acc, line) => {
            [...line.matchAll(r1)].forEach(({ 2: lib, 3: icon }) => {
                const icons = [...icon.matchAll(r2)].map((a) => a[2]);
                if (!icons.length) {
                    return;
                }
                if (!(lib in acc)) {
                    acc[lib] = [];
                }
                acc[lib].push(...icons);
            });
            return acc;
        }, {}),
        symbols: string[] = [],
        l3 = Object.entries(libs).map(
            ([lib, icons]) =>
                `
                // importing ${lib} icons
                import {${[...new Set<string>(icons)]
                    .map((icon) => icon.replaceAll(/-(.)/g, (_2, b: string) => b.toUpperCase()))
                    .map((icon) => icon.replace(/^./, (a) => `fa${a.toUpperCase()}`))
                    .map((icon) => {
                        const symbol = lib + icon.replace(/^fa/, '');
                        symbols.push(symbol);
                        return `${icon} as ${symbol}`;
                    })
                    .sort()
                    .join(',')}} from "@fortawesome/${libMap[lib as keyof typeof libMap]}";`
        ),
        data = `// ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è DO NOT EDIT: This file was generated by @daryl-software/ts-tools
import { library } from '@fortawesome/fontawesome-svg-core';

${l3.join('\n')}

library.add(${symbols.join(',')});`;

    console.log(`üçì Found ${symbols.length} unique icons`);
    writeFileSync(output, data);
    console.log(`üíæ File ${output} generated`);
    console.log(`üíÖ Linting ${output}`);

    exec(`eslint --fix --no-ignore ${output}`, (errx, stdout2, stderr) => {
        console.log('üèÅ Finished', { errx, stdout2, stderr });
        process.exit(0);
    });
});
